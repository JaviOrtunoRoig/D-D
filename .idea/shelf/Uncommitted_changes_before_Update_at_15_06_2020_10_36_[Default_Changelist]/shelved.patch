Index: src/main/java/metodosBDD/CreacionPersonaje.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package metodosBDD;\r\n\r\nimport java.sql.*;\r\nimport java.util.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class CreacionPersonaje {\r\n    private static Connection conn;\r\n    private static Statement stmt = null;\r\n\r\n    static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\";\r\n    static final String DB_URL = \"jdbc:mysql://database-iis.cobadwnzalab.eu-central-1.rds.amazonaws.com\";\r\n    static final String DB_SCHEMA = \"dungeonsdragonsdb\";\r\n\r\n    //  Database credentials\r\n    static final String USER = \"dundragons\";\r\n    static final String PASS = \"VengerHank\";\r\n\r\n    private String rasgos;\r\n    private int id;\r\n    private int idPartida;\r\n    private String nombre;\r\n    private int experiencia;\r\n    private int VidaCalculada = 6;\r\n    private int TP = 9;\r\n    private String idiomas;\r\n    private int[] caracteristicasValores;\r\n    private int[] modificadores;\r\n    private String comportamiento;\r\n    private int pesocalculado;\r\n    private String usuario;\r\n    private int raza;\r\n    private Map<String, Integer> caracteristicas;\r\n\r\n    public CreacionPersonaje() throws ClassNotFoundException, SQLException {\r\n        Class.forName(JDBC_DRIVER);\r\n        conn = DriverManager.getConnection(DB_URL + \"/\" + DB_SCHEMA, USER, PASS);\r\n    }\r\n\r\n    public CreacionPersonaje(String nom, String rsg, int[] caracteristicasArray, int raza, String usuario, Map<String, Integer> caracteristicas, int idPartida) throws SQLException, ClassNotFoundException {\r\n        Class.forName(JDBC_DRIVER);\r\n        conn = DriverManager.getConnection(DB_URL + \"/\" + DB_SCHEMA, USER, PASS);\r\n        stmt = conn.createStatement();\r\n\r\n        id = asignacionID(\"Personaje\");\r\n\r\n        modificadores = new int[6];\r\n        this.raza = raza;\r\n        this.usuario = usuario;\r\n        this.caracteristicas = caracteristicas;\r\n        this.idPartida = idPartida;\r\n        nombre = nom;\r\n\r\n        if (rsg.length() > 100){\r\n            rasgos = rsg.substring(100);\r\n        } else {\r\n            rasgos = rsg;\r\n        }\r\n\r\n        caracteristicasValores = caracteristicasArray;\r\n        asignacionModificadores(caracteristicasValores);\r\n\r\n        asignacionVidaAutomatica();\r\n        asignacionTP();\r\n\r\n        experiencia = 0;\r\n        pesocalculado = 0;\r\n\r\n        asignacionComportamiento();\r\n        asignacionIdiomas();\r\n        insertarPersonaje();\r\n        insertarModificadores();\r\n\r\n        int cant = 0;\r\n        int numAl;\r\n\r\n        for(int i = 0; i < 3; i++){\r\n            numAl = (int) (Math.random() * 6 + 1);\r\n            cant = cant + numAl;\r\n        }\r\n\r\n        asignacionMonedas(cant);\r\n    }\r\n\r\n    public void insertarPersonaje() throws SQLException {\r\n        String sqlPersonaje = \"INSERT INTO Personaje VALUES (\" +\r\n            id + \", '\" +\r\n            nombre + \"', '\" +\r\n            usuario + \"', \" +\r\n            idPartida + \", \" +\r\n            raza +  \", \" +\r\n            experiencia + \", '\" +\r\n            rasgos + \"', \" +\r\n            pesocalculado + \", '\" +\r\n            idiomas + \"', \" +\r\n            TP + \", \" +\r\n            VidaCalculada + \", '\" +\r\n            comportamiento + \"', \" +\r\n            VidaCalculada + \")\";\r\n        stmt.executeUpdate(sqlPersonaje);\r\n    }\r\n\r\n    public int getId(String nom) throws SQLException {\r\n\r\n        Statement stmt3 = null;\r\n        stmt3 = conn.createStatement();\r\n\r\n        String sqlUs = \"SELECT idPersonaje, Usuario FROM Personaje\";\r\n        ResultSet rsUs = stmt3.executeQuery(sqlUs);\r\n\r\n\r\n        int idPer = 0;\r\n\r\n        while (rsUs.next()) {\r\n            if (nom.equals(rsUs.getString(\"usuario\"))) {\r\n                idPer = rsUs.getInt(\"idPersonaje\");\r\n            }\r\n        }\r\n\r\n        return idPer;\r\n    }\r\n\r\n    public int [] getCaracteristicas(String nom) throws SQLException {\r\n\r\n        int [] sol;\r\n        sol = new int [6];\r\n\r\n        Statement stmt2 = null;\r\n        stmt2 = conn.createStatement();\r\n\r\n        String sql = \"SELECT idPersonaje, Fuerza, Inteligencia, Sabiduria, Destreza, Constitución, Carisma FROM Características\";\r\n        ResultSet rsc = stmt2.executeQuery(sql);\r\n\r\n        while(rsc.next()){\r\n            if(rsc.getInt(\"idPersonaje\") == getId(nom)){\r\n                sol[0] = rsc.getInt(\"Fuerza\");\r\n                sol[1] = rsc.getInt(\"Inteligencia\");\r\n                sol[2] = rsc.getInt(\"Sabiduria\");\r\n                sol[3] = rsc.getInt(\"Destreza\");\r\n                sol[4] = rsc.getInt(\"Constitución\");\r\n                sol[5] = rsc.getInt(\"Carisma\");\r\n            }\r\n        }\r\n\r\n        rsc.close();\r\n\r\n        return sol;\r\n    }\r\n\r\n\r\n    private int asignacionID(String nom) throws SQLException {\r\n\r\n        String sql = \"SELECT id\" + nom + \" FROM \" + nom;\r\n\r\n        ResultSet rs = stmt.executeQuery(sql);\r\n\r\n        if(rs == null){\r\n            return 1;\r\n        } else {\r\n            int cont = 1;\r\n            while(rs.next()){\r\n                cont++;\r\n            }\r\n\r\n            return cont;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void asignacionModificadores(int [] num){\r\n        for(int i = 0; i < 6; i++){\r\n\r\n            int mod = 0;\r\n\r\n            if (num[i] == 3) {\r\n                mod = -3;\r\n            } else if (num[i] == 4 || num[i] == 5) {\r\n                mod = -2;\r\n            } else if (num[i] >= 6 && num[i] <= 8) {\r\n                mod = -1;\r\n            } else if (num[i] >= 13 && num[i] <= 15) {\r\n                mod = 1;\r\n            } else if (num[i] == 16 || num[i] == 17) {\r\n                mod = 2;\r\n            } else if (num[i] == 18) {\r\n                mod = 3;\r\n            }\r\n\r\n            modificadores[i] = mod;\r\n        }\r\n    }\r\n\r\n    public void asignacionVidaAutomatica() throws SQLException {\r\n        String sql = \"SELECT idRazas, DadoVida FROM Razas\";\r\n        ResultSet rs = stmt.executeQuery(sql);\r\n\r\n        boolean listo = false;\r\n        int vida = 0;\r\n\r\n        while(rs.next() && !listo){\r\n            if(rs.getInt(\"idRazas\") == raza){\r\n                vida = rs.getInt(\"DadoVida\");\r\n                listo = true;\r\n            }\r\n        }\r\n\r\n        vida = (int) (Math.random() * vida + 1);\r\n\r\n        int mod = modificadores[4];\r\n        VidaCalculada = VidaCalculada + vida + mod;\r\n\r\n    }\r\n\r\n    public void asignacionTP() {\r\n\r\n\r\n        int mod = modificadores[3] * (-1);\r\n\r\n        TP = TP + mod;\r\n\r\n    }\r\n\r\n    private void asignacionComportamiento(){\r\n        int numAl = (int) (Math.random() * 3 + 1);\r\n\r\n        if(numAl == 1){\r\n            comportamiento = \"legal\";\r\n        } else if(numAl == 2){\r\n            comportamiento = \"neutro\";\r\n        } else if(numAl == 3){\r\n            comportamiento = \"caotico\";\r\n        }\r\n    }\r\n\r\n    private void asignacionIdiomas() {\r\n        int num = caracteristicas.get(\"Inteligencia\");\r\n\r\n        if (num == 3) {\r\n            idiomas = (\"dificultades para leer y escribir\");\r\n        } else if (num == 4 || num == 5) {\r\n            idiomas = (\"No puede leer ni escribir\");\r\n        } else if (num >= 6 && num <= 8) {\r\n            idiomas = (\"No puede escribir palabras sencillas\");\r\n        } else if(num >= 9 && num <= 12){\r\n            idiomas = (\"Puede leer y escribir en su propia lengua\");\r\n        }else if (num >= 13 && num <= 15) {\r\n            idiomas = (\"Puede leer y escribir en su propia idioma + goblin\");\r\n        } else if (num == 16 || num == 17) {\r\n            idiomas = (\"Puede leer y escribir en su propia idioma + orco y goblin\");\r\n        } else if (num == 18) {\r\n            idiomas = (\"Puede leer y escribir en su propia idioma + orco + goblin + elfo\");\r\n        }\r\n    }\r\n\r\n    public void insertarModificadores() throws SQLException {\r\n\r\n        int idC = asignacionID(\"Características\");\r\n\r\n        stmt = conn.createStatement();\r\n        String sqlInsert = \"INSERT INTO Características \" + \"VALUES (\" + id + \",\" + idC + \",\" +\r\n                caracteristicasValores[0] + \",\" + modificadores[0] + \",\" +\r\n                caracteristicasValores[1] + \",\" + modificadores[1] + \",\" +\r\n                caracteristicasValores[2] + \",\" + modificadores[2] + \",\" +\r\n                caracteristicasValores[3] + \",\" + modificadores[3] + \",\" +\r\n                caracteristicasValores[4] + \",\" + modificadores[4] + \",\" +\r\n                caracteristicasValores[5] + \",\" + modificadores[5] + \")\";\r\n        stmt.executeUpdate(sqlInsert);\r\n    }\r\n\r\n    private void asignacionMonedas(int resMon) throws SQLException {\r\n\r\n        resMon = resMon * 10;\r\n\r\n        String sqlInsert = \"INSERT INTO Moneda VALUES( \" + id + \", \" + 0 + \", \" + 0 + \", \" + 0 + \", \" + resMon + \", \" + 0 + \")\";\r\n\r\n        stmt.executeUpdate(sqlInsert);\r\n    }\r\n\r\n    public CreacionPersonaje(int [] car, String nom, String rsg, String idioms, int resVida, String comp, int resMon,\r\n                             String usr, int idPartida, Map<String,Integer> cars, int raza) throws ClassNotFoundException, SQLException {\r\n\r\n        Class.forName(JDBC_DRIVER);\r\n        conn = DriverManager.getConnection(DB_URL + \"/\" + DB_SCHEMA, USER, PASS);\r\n        stmt = conn.createStatement();\r\n\r\n        this.usuario = usr;\r\n        this.idPartida = idPartida;\r\n        this.caracteristicas = cars;\r\n        this.raza = raza;\r\n\r\n        modificadores = new int[6];\r\n        id = asignacionID(\"Personaje\");\r\n        nombre = nom;\r\n        rasgos = rsg;\r\n        idiomas = idioms;\r\n        comportamiento = comp;\r\n        VidaCalculada = VidaCalculada + resVida;\r\n        experiencia = 0;\r\n        pesocalculado = 0;\r\n\r\n        caracteristicasValores = car;\r\n\r\n        asignacionModificadores(caracteristicasValores);\r\n        insertarPersonaje();\r\n        insertarModificadores();\r\n        asignacionMonedas(resMon);\r\n    }\r\n\r\n    public int getIdUs(String nom) throws SQLException {\r\n        String sqlUs = \"SELECT idPersonaje, Usuario FROM Personaje\";\r\n        ResultSet rsUs = stmt.executeQuery(sqlUs);\r\n\r\n        int idPer = 0;\r\n\r\n        while (rsUs.next()) {\r\n            if (nom.equals(rsUs.getString(\"usuario\"))) {\r\n                idPer = rsUs.getInt(\"idPersonaje\");\r\n            }\r\n        }\r\n\r\n        return idPer;\r\n    }\r\n\r\n    public String [] getStats(String nom) throws SQLException, ClassNotFoundException {\r\n        String [] sol = new String[8];\r\n        sol[0] = nom;\r\n\r\n        Class.forName(JDBC_DRIVER);\r\n        conn = DriverManager.getConnection(DB_URL + \"/\" + DB_SCHEMA, USER, PASS);\r\n\r\n        Statement stmtAux = null;\r\n        stmtAux = conn.createStatement();\r\n\r\n        String sql = \"SELECT Nombre, Usuario, comportamiento, raza, TP, VidaCalculada, experiencia FROM Personaje\";\r\n        ResultSet rs = stmtAux.executeQuery(sql);\r\n\r\n        boolean encontrado = false;\r\n\r\n        while(rs.next() && !encontrado){\r\n            if(sol[0].equals(rs.getString(\"Usuario\"))){\r\n\r\n                sol[1] = rs.getString(\"Nombre\");\r\n                sol[2] = rs.getString(\"comportamiento\");\r\n                sol[3] = getStatsRaza(nom, rs.getInt(\"raza\"))[0];\r\n                sol[4] = Integer.toString(rs.getInt(\"TP\")) ;\r\n                sol[5] = Integer.toString(rs.getInt(\"VidaCalculada\"));\r\n                sol[6] = Integer.toString(rs.getInt(\"experiencia\"));\r\n                sol[7] = getStatsRaza(nom, rs.getInt(\"raza\"))[1];\r\n\r\n                encontrado = true;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return sol;\r\n    }\r\n\r\n    public String[] getStatsRaza(String nom, int idRaz) throws SQLException, ClassNotFoundException {\r\n        String sol[] = new String[2];\r\n\r\n        Class.forName(JDBC_DRIVER);\r\n        conn = DriverManager.getConnection(DB_URL + \"/\" + DB_SCHEMA, USER, PASS);\r\n\r\n        Statement stmtAux = null;\r\n        stmtAux = conn.createStatement();\r\n\r\n        String sqlAux = \"SELECT idRazas, DadoVida, NombreRaza FROM Razas\";\r\n        ResultSet rsAux = stmtAux.executeQuery(sqlAux);\r\n\r\n        boolean encontrado = false;\r\n\r\n        while(rsAux.next() && !encontrado){\r\n            if(idRaz == rsAux.getInt(\"idRazas\")){\r\n                sol[0] = rsAux.getString(\"NombreRaza\");\r\n                sol[1] = rsAux.getString(\"DadoVida\");\r\n\r\n                encontrado = true;\r\n            }\r\n        }\r\n\r\n        return sol;\r\n    }\r\n\r\n    public int getRaza(String nom) throws SQLException, ClassNotFoundException {\r\n        Class.forName(JDBC_DRIVER);\r\n        conn = DriverManager.getConnection(DB_URL + \"/\" + DB_SCHEMA, USER, PASS);\r\n\r\n        Statement stmtAux = null;\r\n        stmtAux = conn.createStatement();\r\n\r\n        String sql = \"SELECT raza FROM Personaje\";\r\n        ResultSet rs = stmtAux.executeQuery(sql);\r\n\r\n        boolean encontrado = false;\r\n\r\n        int raz = 0;\r\n\r\n        while(rs.next() && !encontrado) {\r\n            if (nom.equals(rs.getString(\"Usuario\"))) {\r\n                raz = rs.getInt(\"idRaza\");\r\n            }\r\n        }\r\n\r\n        return raz;\r\n    }\r\n\r\n\r\n    public Map<Integer, List<String>> getHabilidades (String nom) throws SQLException, ClassNotFoundException {\r\n\r\n        Map<Integer, List<String>> sol = new HashMap<>();\r\n\r\n        int raz = getRaza(nom);\r\n\r\n        Class.forName(JDBC_DRIVER);\r\n        conn = DriverManager.getConnection(DB_URL + \"/\" + DB_SCHEMA, USER, PASS);\r\n\r\n        Statement stmtAux = null;\r\n        stmtAux = conn.createStatement();\r\n\r\n        String sql = \"SELECT idHabilidad, nombre, idRaza, descripcion, dadoHabilidad, requisitoDado \" +\r\n                \"FROM HabilidadEspecial\";\r\n        ResultSet rs = stmtAux.executeQuery(sql);\r\n\r\n        while(rs.next()){\r\n            if(raz == rs.getInt(\"idRaza\")){\r\n                List<String> hab = new ArrayList<>();\r\n\r\n                hab.add(rs.getString(\"nombre\"));\r\n                hab.add(rs.getString(\"descripcion\"));\r\n                hab.add(rs.getString(\"dadoHabilidad\"));\r\n                hab.add(rs.getString(\"requisitoDado\"));\r\n\r\n\r\n                sol.put(rs.getInt(\"idHabilidad\"), hab);\r\n\r\n\r\n            }\r\n        }\r\n\r\n        System.out.println(sol);\r\n\r\n\r\n        return sol;\r\n    }\r\n\r\n    public String[] habilidadEspecial(String nom) throws SQLException, ClassNotFoundException {\r\n        String [] sol = new String[20];\r\n\r\n        int cont = 0;\r\n\r\n        Map<Integer, List<String>> HE = getHabilidades(nom);\r\n\r\n        for(List<String> aux : HE.values()){\r\n            String habilidad = \"\";\r\n\r\n            for(String dato : aux){\r\n                habilidad += dato + \"\\t\";\r\n            }\r\n\r\n            sol[cont] = habilidad;\r\n            System.out.println(sol[cont]);\r\n            cont++;\r\n\r\n\r\n        }\r\n\r\n        return sol;\r\n\r\n\r\n    }\r\n\r\n    public String getRasgos(String nom) throws SQLException, ClassNotFoundException {\r\n        String sol = null;\r\n\r\n        Class.forName(JDBC_DRIVER);\r\n        conn = DriverManager.getConnection(DB_URL + \"/\" + DB_SCHEMA, USER, PASS);\r\n\r\n        Statement stmtAux = null;\r\n        stmtAux = conn.createStatement();\r\n\r\n        String sql = \"SELECT rasgos, Usuario FROM Personaje\";\r\n        ResultSet rs = stmtAux.executeQuery(sql);\r\n\r\n        boolean encontrado = false;\r\n\r\n        while(rs.next() && ! encontrado){\r\n            if(nom.equals(rs.getString(\"Usuario\"))){\r\n                sol = rs.getString(\"rasgos\");\r\n            }\r\n        }\r\n\r\n        return sol;\r\n    }\r\n\r\n    public String getIdioma(String nom) throws SQLException, ClassNotFoundException {\r\n        String sol = null;\r\n\r\n        Class.forName(JDBC_DRIVER);\r\n        conn = DriverManager.getConnection(DB_URL + \"/\" + DB_SCHEMA, USER, PASS);\r\n\r\n        Statement stmtAux = null;\r\n        stmtAux = conn.createStatement();\r\n\r\n        String sql = \"SELECT idiomas, Usuario FROM Personaje\";\r\n        ResultSet rs = stmtAux.executeQuery(sql);\r\n\r\n        boolean encontrado = false;\r\n\r\n        while(rs.next() && ! encontrado){\r\n            if(nom.equals(rs.getString(\"Usuario\"))){\r\n                sol = rs.getString(\"idiomas\");\r\n            }\r\n        }\r\n\r\n        return sol;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/metodosBDD/CreacionPersonaje.java	(revision c27ac21ffb444a962ebe12e6b710bc5a75a9a2d6)
+++ src/main/java/metodosBDD/CreacionPersonaje.java	(date 1591874778607)
@@ -385,9 +385,6 @@
     }
 
     public int getRaza(String nom) throws SQLException, ClassNotFoundException {
-        Class.forName(JDBC_DRIVER);
-        conn = DriverManager.getConnection(DB_URL + "/" + DB_SCHEMA, USER, PASS);
-
         Statement stmtAux = null;
         stmtAux = conn.createStatement();
 
